openapi: 3.0.3
info:
  title: FiscaFlow API
  version: 1.0.0
  description: |
    FiscaFlow - Personal Finance Management System API
    
    This API allows user registration, authentication, profile management, transaction management, account and category management.
servers:
  - url: http://localhost:8080
    description: Local server
  - url: https://api.fiscaflow.com
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        phone:
          type: string
        date_of_birth:
          type: string
          format: date
        timezone:
          type: string
        locale:
          type: string
        role:
          type: string
        status:
          type: string
        email_verified:
          type: boolean
        phone_verified:
          type: boolean
        last_login_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    UserRegisterRequest:
      type: object
      required: [email, password, first_name, last_name]
      properties:
        email:
          type: string
        password:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        phone:
          type: string
        timezone:
          type: string
        locale:
          type: string
    UserLoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
        password:
          type: string
    UserLoginResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        user:
          $ref: '#/components/schemas/User'
    UserProfileUpdateRequest:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        phone:
          type: string
        date_of_birth:
          type: string
          format: date
        timezone:
          type: string
        locale:
          type: string
    Transaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        account_id:
          type: string
          format: uuid
        category_id:
          type: string
          format: uuid
        amount:
          type: number
        currency:
          type: string
        description:
          type: string
        merchant:
          type: string
        location:
          type: string
        transaction_date:
          type: string
          format: date-time
        posted_date:
          type: string
          format: date-time
        status:
          type: string
        tags:
          type: array
          items:
            type: string
        notes:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    TransactionCreateRequest:
      type: object
      required: [account_id, amount, description, transaction_date]
      properties:
        account_id:
          type: string
        category_id:
          type: string
        amount:
          type: number
        currency:
          type: string
        description:
          type: string
        merchant:
          type: string
        location:
          type: string
        transaction_date:
          type: string
          format: date-time
        posted_date:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string
        notes:
          type: string
    Account:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
        institution:
          type: string
        balance:
          type: number
        currency:
          type: string
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    AccountCreateRequest:
      type: object
      required: [name, type]
      properties:
        name:
          type: string
        type:
          type: string
        institution:
          type: string
        balance:
          type: number
        currency:
          type: string
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        icon:
          type: string
        color:
          type: string
        parent_id:
          type: string
          format: uuid
        is_default:
          type: boolean
        is_active:
          type: boolean
        sort_order:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    CategoryCreateRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
        description:
          type: string
        icon:
          type: string
        color:
          type: string
        parent_id:
          type: string
        is_default:
          type: boolean
        sort_order:
          type: integer

security:
  - bearerAuth: []

paths:
  /api/v1/auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
      responses:
        '201':
          description: User registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          description: User already exists
        '400':
          description: Invalid request
  /api/v1/auth/login:
    post:
      summary: Login user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponse'
        '401':
          description: Invalid credentials
        '400':
          description: Invalid request
  /api/v1/auth/refresh:
    post:
      summary: Refresh access token
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponse'
        '401':
          description: Invalid or expired refresh token
        '400':
          description: Invalid request
  /api/v1/auth/logout:
    post:
      summary: Logout user
      tags: [Auth]
      security:
        - bearerAuth: []
      requestBody:
        required: false
      parameters:
        - in: header
          name: X-Session-ID
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Logout successful
        '400':
          description: Bad request
        '401':
          description: Unauthorized
  /api/v1/users/profile:
    get:
      summary: Get user profile
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
    put:
      summary: Update user profile
      tags: [Users]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdateRequest'
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
  /api/v1/users:
    get:
      summary: List users (admin only)
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
  /api/v1/transactions:
    get:
      summary: List transactions
      tags: [Transactions]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: account_id
          schema:
            type: string
        - in: query
          name: category_id
          schema:
            type: string
        - in: query
          name: start_date
          schema:
            type: string
            format: date
        - in: query
          name: end_date
          schema:
            type: string
            format: date
        - in: query
          name: status
          schema:
            type: string
      responses:
        '200':
          description: List of transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '401':
          description: Unauthorized
    post:
      summary: Create transaction
      tags: [Transactions]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCreateRequest'
      responses:
        '201':
          description: Transaction created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
  /api/v1/transactions/{id}:
    get:
      summary: Get transaction by ID
      tags: [Transactions]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '404':
          description: Not found
        '401':
          description: Unauthorized
    put:
      summary: Update transaction
      tags: [Transactions]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCreateRequest'
      responses:
        '200':
          description: Transaction updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
    delete:
      summary: Delete transaction
      tags: [Transactions]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted
        '401':
          description: Unauthorized
  /api/v1/accounts:
    get:
      summary: List accounts
      tags: [Accounts]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '401':
          description: Unauthorized
    post:
      summary: Create account
      tags: [Accounts]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreateRequest'
      responses:
        '201':
          description: Account created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
  /api/v1/categories:
    get:
      summary: List categories
      tags: [Categories]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized
    post:
      summary: Create category
      tags: [Categories]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreateRequest'
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized 