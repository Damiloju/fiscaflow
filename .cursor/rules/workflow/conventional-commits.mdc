---
description: 
globs: 
alwaysApply: true
---
# Git Conventional Commits

Rule for automatically committing changes made by CursorAI using conventional commits format.

<rule>
name: conventional_commits
description: Automatically commit changes made by CursorAI using conventional commits format
filters:
  - type: event
    pattern: "file_save"
  - type: event
    pattern: "file_create"
  - type: event
    pattern: "file_change"
  - type: event
    pattern: "user_message"

actions:
  - type: execute
    command: |
      # Check if there are uncommitted changes
      if [ -n "$(git status --porcelain)" ]; then
        echo "Uncommitted changes detected - should run tests and commit using conventional format"
        
        # Extract the change type and scope from the changes
        CHANGE_TYPE=""
        case "$CHANGE_DESCRIPTION" in
          *"add"*|*"create"*|*"implement"*) CHANGE_TYPE="feat";;
          *"fix"*|*"correct"*|*"resolve"*) CHANGE_TYPE="fix";;
          *"refactor"*|*"restructure"*) CHANGE_TYPE="refactor";;
          *"test"*) CHANGE_TYPE="test";;
          *"doc"*|*"comment"*|*"readme"*) CHANGE_TYPE="docs";;
          *"style"*|*"format"*) CHANGE_TYPE="style";;
          *"perf"*|*"optimize"*) CHANGE_TYPE="perf";;
          *) CHANGE_TYPE="chore";;
        esac

        # Extract scope from file path or use default
        if [ -n "$FILE" ]; then
          SCOPE=$(dirname "$FILE" | tr '/' '-' | sed 's/^\.-//')
        else
          SCOPE="root"
        fi

        echo "Suggested workflow: make test && git add . && git commit -m \"$CHANGE_TYPE($SCOPE): $CHANGE_DESCRIPTION\""
      fi

  - type: suggest
    message: |
      CONVENTIONAL COMMIT ENFORCEMENT:
      
      MANDATORY: All file changes must be tested and committed using conventional commits format
      
      Format: <type>(<scope>): <description>
      
      Types:
      - feat: A new feature
      - fix: A bug fix
      - docs: Documentation only changes
      - style: Changes that do not affect the meaning of the code
      - refactor: A code change that neither fixes a bug nor adds a feature
      - perf: A code change that improves performance
      - test: Adding missing tests or correcting existing tests
      - chore: Changes to the build process or auxiliary tools
      
      MANDATORY WORKFLOW BEFORE COMMITTING:
      ```bash
      # 1. Run tests first
      make test
      
      # 2. If tests pass, stage and commit
      git add .
      git commit -m "type(scope): description"
      ```
      
      TEST REQUIREMENTS:
      - Unit tests must pass: make test-unit
      - Integration tests must pass: make test-integration
      - All tests must pass: make test
      - If tests fail, fix the issues before committing
      
      EXAMPLES:
      - feat(api): add user registration endpoint
      - fix(auth): resolve JWT token validation issue
      - docs(readme): update installation instructions
      - refactor(domain): restructure user service
      - test(handlers): add unit tests for transaction API
      - chore(deps): update Go dependencies
      
      SCOPE GUIDELINES:
      - api: API endpoints and handlers
      - domain: Business logic and models
      - database: Database migrations and schema
      - auth: Authentication and authorization
      - config: Configuration management
      - docs: Documentation files
      - deps: Dependencies and go.mod
      - root: Root level files (.gitignore, README, etc.)

examples:
  - input: |
      # After creating a new API handler
      FILE="internal/api/handlers/user.go"
      CHANGE_DESCRIPTION="add user registration handler"
    output: |
      make test
      git add internal/api/handlers/user.go
      git commit -m "feat(api): add user registration handler"

  - input: |
      # After fixing a bug in authentication
      FILE="internal/domain/user/service.go"
      CHANGE_DESCRIPTION="fix password validation logic"
    output: |
      make test
      git add internal/domain/user/service.go
      git commit -m "fix(auth): fix password validation logic"

  - input: |
      # After updating documentation
      FILE="README.md"
      CHANGE_DESCRIPTION="update setup instructions"
    output: |
      make test
      git add README.md
      git commit -m "docs(readme): update setup instructions"

  - input: |
      # After adding new dependencies
      FILE="go.mod"
      CHANGE_DESCRIPTION="add new Go dependencies"
    output: |
      make test
      git add go.mod go.sum
      git commit -m "chore(deps): add new Go dependencies"

metadata:
  priority: critical
  version: 1.2
  tags: ["git", "conventional-commits", "workflow", "testing"]
</rule>


<!--
 Copyright (c) 2025 Geoffrey Huntley <ghuntley@ghuntley.com>. All rights reserved.
 SPDX-License-Identifier: Proprietary
-->
