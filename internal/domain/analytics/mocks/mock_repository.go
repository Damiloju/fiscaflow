// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/analytics/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	analytics "fiscaflow/internal/domain/analytics"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateCategorizationRule mocks base method.
func (m *MockRepository) CreateCategorizationRule(ctx context.Context, rule *analytics.CategorizationRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategorizationRule", ctx, rule)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCategorizationRule indicates an expected call of CreateCategorizationRule.
func (mr *MockRepositoryMockRecorder) CreateCategorizationRule(ctx, rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategorizationRule", reflect.TypeOf((*MockRepository)(nil).CreateCategorizationRule), ctx, rule)
}

// CreateSpendingAnalysis mocks base method.
func (m *MockRepository) CreateSpendingAnalysis(ctx context.Context, analysis *analytics.SpendingAnalysis) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSpendingAnalysis", ctx, analysis)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSpendingAnalysis indicates an expected call of CreateSpendingAnalysis.
func (mr *MockRepositoryMockRecorder) CreateSpendingAnalysis(ctx, analysis interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpendingAnalysis", reflect.TypeOf((*MockRepository)(nil).CreateSpendingAnalysis), ctx, analysis)
}

// DeleteCategorizationRule mocks base method.
func (m *MockRepository) DeleteCategorizationRule(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategorizationRule", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategorizationRule indicates an expected call of DeleteCategorizationRule.
func (mr *MockRepositoryMockRecorder) DeleteCategorizationRule(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategorizationRule", reflect.TypeOf((*MockRepository)(nil).DeleteCategorizationRule), ctx, id)
}

// GetActiveCategorizationRules mocks base method.
func (m *MockRepository) GetActiveCategorizationRules(ctx context.Context) ([]analytics.CategorizationRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveCategorizationRules", ctx)
	ret0, _ := ret[0].([]analytics.CategorizationRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveCategorizationRules indicates an expected call of GetActiveCategorizationRules.
func (mr *MockRepositoryMockRecorder) GetActiveCategorizationRules(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveCategorizationRules", reflect.TypeOf((*MockRepository)(nil).GetActiveCategorizationRules), ctx)
}

// GetCategorizationRuleByID mocks base method.
func (m *MockRepository) GetCategorizationRuleByID(ctx context.Context, id uuid.UUID) (*analytics.CategorizationRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategorizationRuleByID", ctx, id)
	ret0, _ := ret[0].(*analytics.CategorizationRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategorizationRuleByID indicates an expected call of GetCategorizationRuleByID.
func (mr *MockRepositoryMockRecorder) GetCategorizationRuleByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategorizationRuleByID", reflect.TypeOf((*MockRepository)(nil).GetCategorizationRuleByID), ctx, id)
}

// GetCategorizationRules mocks base method.
func (m *MockRepository) GetCategorizationRules(ctx context.Context, offset, limit int) ([]analytics.CategorizationRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategorizationRules", ctx, offset, limit)
	ret0, _ := ret[0].([]analytics.CategorizationRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategorizationRules indicates an expected call of GetCategorizationRules.
func (mr *MockRepositoryMockRecorder) GetCategorizationRules(ctx, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategorizationRules", reflect.TypeOf((*MockRepository)(nil).GetCategorizationRules), ctx, offset, limit)
}

// GetCategoryByID mocks base method.
func (m *MockRepository) GetCategoryByID(ctx context.Context, id uuid.UUID) (*analytics.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByID", ctx, id)
	ret0, _ := ret[0].(*analytics.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByID indicates an expected call of GetCategoryByID.
func (mr *MockRepositoryMockRecorder) GetCategoryByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByID", reflect.TypeOf((*MockRepository)(nil).GetCategoryByID), ctx, id)
}

// GetSimilarTransactions mocks base method.
func (m *MockRepository) GetSimilarTransactions(ctx context.Context, description string, limit int) ([]analytics.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSimilarTransactions", ctx, description, limit)
	ret0, _ := ret[0].([]analytics.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSimilarTransactions indicates an expected call of GetSimilarTransactions.
func (mr *MockRepositoryMockRecorder) GetSimilarTransactions(ctx, description, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSimilarTransactions", reflect.TypeOf((*MockRepository)(nil).GetSimilarTransactions), ctx, description, limit)
}

// GetSpendingAnalysisByID mocks base method.
func (m *MockRepository) GetSpendingAnalysisByID(ctx context.Context, id uuid.UUID) (*analytics.SpendingAnalysis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpendingAnalysisByID", ctx, id)
	ret0, _ := ret[0].(*analytics.SpendingAnalysis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpendingAnalysisByID indicates an expected call of GetSpendingAnalysisByID.
func (mr *MockRepositoryMockRecorder) GetSpendingAnalysisByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpendingAnalysisByID", reflect.TypeOf((*MockRepository)(nil).GetSpendingAnalysisByID), ctx, id)
}

// GetSpendingAnalysisByUser mocks base method.
func (m *MockRepository) GetSpendingAnalysisByUser(ctx context.Context, userID uuid.UUID, startDate, endDate time.Time) (*analytics.SpendingAnalysis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpendingAnalysisByUser", ctx, userID, startDate, endDate)
	ret0, _ := ret[0].(*analytics.SpendingAnalysis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpendingAnalysisByUser indicates an expected call of GetSpendingAnalysisByUser.
func (mr *MockRepositoryMockRecorder) GetSpendingAnalysisByUser(ctx, userID, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpendingAnalysisByUser", reflect.TypeOf((*MockRepository)(nil).GetSpendingAnalysisByUser), ctx, userID, startDate, endDate)
}

// GetTransactionsByPeriod mocks base method.
func (m *MockRepository) GetTransactionsByPeriod(ctx context.Context, userID uuid.UUID, startDate, endDate time.Time) ([]analytics.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByPeriod", ctx, userID, startDate, endDate)
	ret0, _ := ret[0].([]analytics.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByPeriod indicates an expected call of GetTransactionsByPeriod.
func (mr *MockRepositoryMockRecorder) GetTransactionsByPeriod(ctx, userID, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByPeriod", reflect.TypeOf((*MockRepository)(nil).GetTransactionsByPeriod), ctx, userID, startDate, endDate)
}

// UpdateCategorizationRule mocks base method.
func (m *MockRepository) UpdateCategorizationRule(ctx context.Context, rule *analytics.CategorizationRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategorizationRule", ctx, rule)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategorizationRule indicates an expected call of UpdateCategorizationRule.
func (mr *MockRepositoryMockRecorder) UpdateCategorizationRule(ctx, rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategorizationRule", reflect.TypeOf((*MockRepository)(nil).UpdateCategorizationRule), ctx, rule)
}
